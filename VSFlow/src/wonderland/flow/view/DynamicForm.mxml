<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" creationComplete="init()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import mx.containers.FormItem;
			import mx.controls.CheckBox;
			import mx.controls.ComboBox;
			import mx.controls.DateField;
			import mx.controls.TextArea;
			import mx.controls.TextInput;
			import mx.core.UIComponent;
			[Bindable] private var _fields:Array;
			[Bindable] private var _data:Object;
			
			private var inputList:Object;
			
			private function init():void{
				initForm(_fields,_data);
			}
			
			public function set fields(a:Array):void{
				_fields = a;
				initForm(_fields,_data);
			}
			
			public function set data(o:Object):void{
				_data = o;
				initForm(_fields,_data);
			} 
			
			public function get data():Object{
				var res:Object = new Object();
				for (var k:String in inputList){
					if(inputList[k] is TextInput){
						res[k]=(inputList[k] as TextInput).text;	
					}else if(inputList[k] is TextArea){
						res[k]=(inputList[k] as TextArea).text;	
					}else if(inputList[k] is EasyDateField){
						res[k]=(inputList[k] as EasyDateField).selectedDate;	
					}else if(inputList[k] is CheckBox){
						res[k]=(inputList[k] as CheckBox).selected;	
					}else if(inputList[k] is EasyDateTimeField){
						res[k]=(inputList[k] as EasyDateTimeField).selectedDateTime;	
					}
				}
				return res;
			}
			
			private function initForm(flds:Array,d:Object):void{
				if(!this.initialized){
					return;
				}
				inputList = new Object();
				for each (var f:Object in flds){
					pushFormItem(f["name"],f["field"],d[f["field"]],f["type"],f["source"]);
				}
				invalidateDisplayList();
			}
			
			private function pushFormItem(label:String, field:String, value:Object, type:String,source:String):void{
				if (type==null){
					type="string";
				}
				var fi:FormItem = new FormItem();
				fi.label = label;
				fi.percentWidth = 100;
				
				var ti:UIComponent = initField(type,field,value,field!="id",source);
				fi.addChild(ti);
				dataForm.addChild(fi);
				
				inputList[field]=ti;
			}
			
			private function initField(type:String,name:String,value:Object,isEditable:Boolean,source:String):UIComponent{
				var res:UIComponent;
				switch(type)
				{
					case "string":
					{
						res = new TextInput();
						res.percentWidth = 100;
						res.name = name;
						res.enabled = isEditable;
						(res as TextInput).editable = isEditable;
						(res as TextInput).text = value ? String(value) : null;
						break;
					} 
					case "text":
					{
						res = new TextArea();
						res.percentWidth = 100;
						res.percentHeight = 100;
						res.name = name;
						(res as TextArea).editable = isEditable;
						(res as TextArea).text = value ? String(value) : null;
						break;
					}
					case "date":
					{
						res = new EasyDateField();
						res.name = name;
						(res as EasyDateField).editable = isEditable;
						(res as EasyDateField).selectedDateString = String(value);
						break;
					}
					case "datetime":
					{
						res = new EasyDateTimeField();
						res.name = name;
						(res as EasyDateTimeField).editable = isEditable;
						(res as EasyDateTimeField).selectedDateString = String(value);
						break;
					}
					case "boolean":
					{
						res = new CheckBox();
						res.name = name;
						(res as CheckBox).enabled = isEditable;
						(res as CheckBox).selected= Boolean(value);
						break;
					}
					case "list":
					{
						res = new CheckBox();
						res.name = name;
						(res as CheckBox).enabled = isEditable;
						(res as CheckBox).selected= Boolean(value);
						break;
					}
					default :
					{
						break;
					}
				}
				return res;
			}
			
			
			
		]]>
	</fx:Script>
	<mx:Form id="dataForm" width="100%" height="100%">
		
	</mx:Form>
</s:Group>
