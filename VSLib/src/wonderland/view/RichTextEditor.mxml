<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:flow="library://ns.adobe.com/flashx/textLayout"
			   xmlns:textEditBar="textEditBar.*"
			   xmlns:txui="flashx.textLayout.ui.*"
			   xmlns:txrulers="flashx.textLayout.ui.rulers.*"
			   xmlns:txinsp="flashx.textLayout.ui.inspectors.*"
			   explicitMinWidth="300" 
			   explicitMinHeight="200"
			   creationComplete="handleCreationComplete()"
			   resize="handleResize()"
			   
			   >
	
	
	<fx:Script><![CDATA[
		import flashx.textLayout.container.ContainerController;
		import flashx.textLayout.conversion.TextConverter;
		import flashx.textLayout.debug.assert;
		import flashx.textLayout.edit.EditManager;
		import flashx.textLayout.edit.EditingMode;
		import flashx.textLayout.edit.ElementRange;
		import flashx.textLayout.edit.ISelectionManager;
		import flashx.textLayout.edit.SelectionFormat;
		import flashx.textLayout.edit.SelectionManager;
		import flashx.textLayout.edit.SelectionState;
		import flashx.textLayout.elements.Configuration;
		import flashx.textLayout.elements.InlineGraphicElementStatus;
		import flashx.textLayout.elements.ParagraphElement;
		import flashx.textLayout.elements.SpanElement;
		import flashx.textLayout.elements.TextFlow;
		import flashx.textLayout.events.SelectionEvent;
		import flashx.textLayout.events.StatusChangeEvent;
		import flashx.textLayout.formats.TextLayoutFormat;
		import flashx.textLayout.ui.inspectors.TextInspectorController;
		import flashx.undo.IUndoManager;
		import flashx.undo.UndoManager;
		
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.events.IndexChangedEvent;
		import mx.managers.PopUpManager;
		
		import textEditBar.FileIOHelper;
		
		private var resizeOK:Boolean;
		[Bindable]public var activeFlow:TextFlow;
		
		// undo/redo manager
		private var undoManager:IUndoManager;
		
		private var bottomPanels:Array = [];
		
		public function handleCreationComplete(): void
		{
			//this.title = data.word;
			
			initializeConfiguration();
			//FileIOHelper.parentWindow = WiKiBS.thisInstance;
			//FileIOHelper.changeContent = changeContent;
			
			resizeOK = true;
			handleResize();
			
			undoManager = new UndoManager();
			
			hruler.creationComplete();
			vruler.creationComplete();
			
			 var numPanels:int = bottomTabs.numChildren;
			for (var i:int = 0; i < numPanels; ++i)
			{
				var panel:Canvas = bottomTabs.getChildAt(i) as Canvas;
				bottomPanels.push(panel.getChildAt(0));
				if (i > 0)
					panel.removeAllChildren();
			}
			bottomTabs.addEventListener(IndexChangedEvent.CHANGE, onBottomTabChanged); 
			
			this.addEventListener(Event.ACTIVATE, onFocus); 
			
			changeContent(createEmptyFlow());
			callLater(doFocus);
		}
		
		private function doFocus():void
		{
			if (activeFlow)
			{
				var selMgr:ISelectionManager = activeFlow.interactionManager;
				if (selMgr && textPanel.visible)
					selMgr.setFocus();
			}
		}
		private function createEmptyFlow():TextFlow
		{
			var newFlow:TextFlow = new TextFlow();
			var para:ParagraphElement = new ParagraphElement();
			para.addChild(new SpanElement());
			newFlow.addChild(para);
			
			return newFlow;
		}
		
		private function initializeConfiguration():void
		{
			var config:Configuration = TextFlow.defaultConfiguration;
			config.unfocusedSelectionFormat = new SelectionFormat(0xffffff, 1.0, BlendMode.DIFFERENCE, 0xffffff, 1.0, BlendMode.DIFFERENCE, 0);
			config.inactiveSelectionFormat = new SelectionFormat(0xffffff, 1.0, BlendMode.DIFFERENCE, 0xffffff, 1.0, BlendMode.DIFFERENCE, 0);
			config.manageTabKey = true;
			var initialFormat:TextLayoutFormat = new TextLayoutFormat();
			initialFormat.fontFamily = "Arial";
			initialFormat.fontSize = 16;
			initialFormat.paddingLeft = 2;
			initialFormat.paddingTop = 2;
			initialFormat.paddingRight = 2;
			initialFormat.paddingBottom = 2;
			config.textFlowInitialFormat = initialFormat;
		}
		
		private function onFocus(event:Event):void
		{
			if (activeFlow)
			{
				var selMgr:ISelectionManager = activeFlow.interactionManager;
				if(selMgr)
					selMgr.setFocus();
			}
			
		}
		private function onBottomTabChanged(evt:IndexChangedEvent):void
		{
			var panel:Canvas = bottomTabs.getChildAt(evt.oldIndex) as Canvas;
			panel.removeAllChildren();
			panel = bottomTabs.getChildAt(evt.newIndex) as Canvas;
			panel.addChild(bottomPanels[evt.newIndex]);
		}
		
		private var editingMode:String = EditingMode.READ_WRITE;
		
		private function keyListener(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.ESCAPE)
				activeFlow.interactionManager.selectRange(-1,-1);
		}
		
		private function updateEscapeKeyListener():void
		{
			for (var i:int = 0; i < activeFlow.flowComposer.numControllers; i++)
			{
				var controller:ContainerController = activeFlow.flowComposer.getControllerAt(i);
				var container:DisplayObject = controller.container as DisplayObject;
				if (activeFlow.interactionManager)
					container.addEventListener(KeyboardEvent.KEY_DOWN, keyListener,false,0,true);
				else 
					container.removeEventListener(KeyboardEvent.KEY_DOWN, keyListener);
			}
		}        
		
		public function setActiveFlow(newActiveFlow:TextFlow):void
		{
			TextInspectorController.Instance().activeFlow = newActiveFlow;
			for (var i:int = bottomPanels.length - 1; i >= 1; --i)
				bottomPanels[i].activeFlow = newActiveFlow;
		}
		
		public function setInteractionManager(selectType:String):void
		{
			editingMode = selectType;
			var uiActiveFlow:TextFlow = null;
			
			if (activeFlow)    
			{
				switch (selectType)
				{
					case EditingMode.READ_ONLY:
						if (activeFlow.interactionManager)
							activeFlow.interactionManager = null;
						break;
					case EditingMode.READ_WRITE:
						// either direction should work.
						new EditManager(undoManager).textFlow = activeFlow;
						activeFlow.interactionManager = new EditManager(undoManager);
						
						activeFlow.addEventListener(SelectionEvent.SELECTION_CHANGE,mySelectionChangeListener,false,0,true);
						uiActiveFlow = activeFlow;
						activeFlow.interactionManager.selectRange(0, 0);
						break;
					case EditingMode.READ_SELECT:
						activeFlow.interactionManager = new SelectionManager();
						activeFlow.addEventListener(SelectionEvent.SELECTION_CHANGE,mySelectionChangeListener,false,0,true);
						break;
				}
				setActiveFlow(uiActiveFlow);
				updateEscapeKeyListener();
				updateForSelectedElementRange(new SelectionState( activeFlow, 0, 0));
			}
		}
		
		
		private function mySelectionChangeListener(e:SelectionEvent):void
		{
			updateForSelectedElementRange(e ? e.selectionState : null);
		}
		
		/**
		 * Update the GUI for a particular selection range.
		 * @private
		 * @param range may be null
		 */
		private function updateForSelectedElementRange(selectionState:SelectionState):void
		{
			var range:ElementRange = selectionState ? ElementRange.createElementRange(selectionState.textFlow, selectionState.absoluteStart, selectionState.absoluteEnd) : null;
			var selMgr:ISelectionManager = activeFlow.interactionManager;
			
			for (var i:int = bottomPanels.length - 1; i >= 1; --i)
				bottomPanels[i].update(range);
			
			if (selMgr && textPanel.visible)
				selMgr.setFocus();
		}
		
		/** handleResize - resize the child containers
		 * @param alwaysResize - do the recalucation no matter if the size didn't change 
		 */
		public function handleResize():void
		{
			if (resizeOK && activeFlow)
			{
				vruler.RedrawRuler();
				hruler.RedrawRuler();        
			}
		}
		
		public function detachActiveFlow(deleteTheComposer:Boolean):void
		{
			if (activeFlow && activeFlow.flowComposer != null)
			{
				// Detach the containers from the display list
				for (var idx:int = 0; idx < activeFlow.flowComposer.numControllers; idx++)
				{
					var controller:ContainerController = activeFlow.flowComposer.getControllerAt(idx);
					var oldContainer:DisplayObject = controller.container;
					if (oldContainer && oldContainer.parent)
					{
						Canvas(oldContainer.parent).rawChildren.removeChild(oldContainer);
					}
				}
				activeFlow.flowComposer.removeAllControllers();
				
				// also shuts down inline graphics - need another API if we want to do this another way
				if (deleteTheComposer)
					activeFlow.flowComposer = null;
			}        
		}
		
		private function recomposeOnLoadComplete(e:StatusChangeEvent):void
		{
			if (e.status == InlineGraphicElementStatus.ERROR)
				trace("IOERROR loading inlinegraphicelement",e.errorEvent.toString());
			if (e.element.getTextFlow() == activeFlow && e.status == InlineGraphicElementStatus.SIZE_PENDING)
				activeFlow.flowComposer.updateAllControllers();
		}
		
		public function changeContent(newFlow:TextFlow):void
		{
			// Remove old containers from the display list
			if (undoManager != null) 
				undoManager.clearAll();
			if (activeFlow)
			{
				detachActiveFlow(true);
				activeFlow.removeEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE,recomposeOnLoadComplete);
			}
			
			// set activeFlow (note: this variable is used in the mxml code below.)
			activeFlow = newFlow;
			if (!activeFlow)
				return;
			
			activeFlow.addEventListener(StatusChangeEvent.INLINE_GRAPHIC_STATUS_CHANGE,recomposeOnLoadComplete,false,0,true);
			
			textPanel.changeContainerSetup(activeFlow);
			
			activeFlow.interactionManager = new EditManager(undoManager);
			activeFlow.addEventListener(SelectionEvent.SELECTION_CHANGE,mySelectionChangeListener,false,0,true);
			setActiveFlow(activeFlow);
			activeFlow.interactionManager.selectRange(0, 0);
			updateEscapeKeyListener();
			activeFlow.flowComposer.updateAllControllers();
			
			vruler.RedrawRuler();
			hruler.RedrawRuler();
		}
		
		/** visiblePanels is an array of the labels of the right-side property panels that are opened.
		 * if you set it, the panels specified will be opened and all others will be closed.
		 */
		public function set visiblePanels(inPanelNames:Array):void
		{
			var panels:Array = inspectorBox.getChildren();
			for each(var panel:DisplayObject in panels)
			{
				if (panel is MultiPanel)
				{
					var mp:MultiPanel = panel as MultiPanel;
					mp.opened = (inPanelNames.indexOf(mp.label) != -1);
				}
			}
		}
		
		public function get visiblePanels():Array
		{
			var result:Array = [];
			var panels:Array = inspectorBox.getChildren();
			for each(var panel:DisplayObject in panels)
			{
				if (panel is MultiPanel)
				{
					var mp:MultiPanel = panel as MultiPanel;
					if (mp.opened)
						result.push(mp.label);
				}
			}
			return result;
		}
		

		// ---------------------------------------------------------------------------------------------------------
		// gilad: I did this:
		private var resultData:String = null;
		protected function save(event:MouseEvent):void
		{
			resultData = FileIOHelper.export(activeFlow,TextConverter.TEXT_FIELD_HTML_FORMAT);
			this.dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
		}
		
		public function get data():String{
			return FileIOHelper.export(activeFlow,TextConverter.TEXT_FIELD_HTML_FORMAT);
		}
		
		public function set data(o:String):void{
			if(o!=null){
				FileIOHelper.importHTML(String(o),changeContent);
				
			}
			
		} 
		
		protected function toggleTextStyling(event:MouseEvent):void
		{
			if(textStyleBox.height>1){
				hideTextStyle.play();
			}else{
				showTextStyle.play();
			}
		}
		
		protected function toggleImageBox(event:MouseEvent):void
		{
			if(bottomTabs.selectedChild==imageBox){
				bottomTabs.selectedChild = empty;
			}else{
				bottomTabs.selectedChild = imageBox;
				
			}
		}

		protected function toggleLinkBox(event:MouseEvent):void
		{
			if(bottomTabs.selectedChild==linkBox){
				bottomTabs.selectedChild = empty;
			}else{
				bottomTabs.selectedChild = linkBox;
				
			}
		}


		protected function close(event:CloseEvent=null):void
		{
			PopUpManager.removePopUp(this);
			
		}

	]]>
	</fx:Script>
	<fx:Declarations>
		<mx:AnimateProperty id="showTextStyle" target="{textStyleBox}" duration="300" property="height" fromValue="0" toValue="{toolBox.height}"/>
		<mx:AnimateProperty id="hideTextStyle" target="{textStyleBox}" duration="300" property="height" fromValue="{toolBox.height}" toValue="0"/>
		<mx:AnimateProperty id="showImageBox" target="{imageBox}" duration="300" property="height" fromValue="0" toValue="50"/>
		<mx:AnimateProperty id="hideImageBox" target="{imageBox}" duration="300" property="height" fromValue="50" toValue="0"/>
		<mx:AnimateProperty id="showLinkBox" target="{linkBox}" duration="300" property="height" fromValue="0" toValue="50"/>
		<mx:AnimateProperty id="hideLinkBox" target="{linkBox}" duration="300" property="height" fromValue="50" toValue="0"/>	
	</fx:Declarations>
	
	
	<mx:VBox
		width="100%"
		height="100%" 
		verticalGap="2"
		backgroundColor="0x607D8A"
		fontFamily="Myriad Pro"
		fontWeight="bold" backgroundAlpha="0.0">
		<mx:ApplicationControlBar x="28" y="0" width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button label="Link" click="toggleLinkBox(event)"/>
			<mx:Button label="Image" click="toggleImageBox(event)"/>
			<mx:Button label="Text Style" click="toggleTextStyling(event)"/>
		</mx:ApplicationControlBar>
		
		<mx:Canvas id="mainPane" width="100%" height="100%">
			<txui:PanelWithEdgeBars
				id="panelWithScrollBars"
				width="100%"
				height="100%"
				edgeInset="18"
				gap="1"
				mainPanel="{textPanel}"
				topBar="{horizontalRulerBar}"
				rightBar="{verticalRulerBar}">
				
				<textEditBar:SingleContainerView id="textPanel" />
				
				<mx:Canvas
					id="verticalRulerBar"
					verticalScrollPolicy="off"
					horizontalScrollPolicy="off">
					<txrulers:RulerBar
						id="vruler"
						orientation="vertical"
						syncToPanel="{textPanel}"
						tabPropertyEditor="{tabPropEditor}"
						tabPanelActive="{tabPanel.opened}">
					</txrulers:RulerBar>
				</mx:Canvas>
				<mx:Canvas
					id="horizontalRulerBar"
					verticalScrollPolicy="off"
					horizontalScrollPolicy="off">
					<txrulers:RulerBar
						id="hruler"
						syncToPanel="{textPanel}"
						tabPropertyEditor="{tabPropEditor}"
						tabPanelActive="{tabPanel.opened}" visible="false">
					</txrulers:RulerBar>
				</mx:Canvas>
				
			</txui:PanelWithEdgeBars>
			
			<mx:Canvas id="toolBox" width="100%" height="100%">
				<mx:HBox id="textStyleBox"
						   horizontalAlign="right"
						   height="0"
						   width="100%"
						   horizontalScrollPolicy="off"
						   backgroundColor="#D9D9D9"
						   verticalScrollBarStyleName="scrollbarStyle"  backgroundAlpha="0.0">
					<mx:VBox id="inspectorBox" verticalGap="1" width="270" backgroundColor="#D9D9D9">
						<txui:MultiPanel id="charPanel"  label="CHARACTER" width="100%" textAlign="left" dropShadowVisible="false">
							<txinsp:CharacterPropertyEditor active="{charPanel.opened}"/>
						</txui:MultiPanel>    
						<txui:MultiPanel id="parPanel" styleName="multiPanel" label="PARAGRAPH" width="100%">
							<txinsp:ParagraphPropertyEditor active="{parPanel.opened}"/>
						</txui:MultiPanel>
						<txui:MultiPanel id="tabPanel" styleName="multiPanel" label="TAB" width="100%" opened="false">
							<txinsp:TabPropertyEditor id="tabPropEditor"/>
						</txui:MultiPanel>
						<txui:MultiPanel id="advancedPanel" styleName="multiPanel" label="ADVANCED CHARACTER" width="100%" opened="false">
							<txinsp:AdvancedTextPropertyEditor active="{advancedPanel.opened}"/>
						</txui:MultiPanel>
						<txui:MultiPanel id="antialiasPanel" styleName="multiPanel" label="ANTIALIAS" width="100%" opened="false">
							<txinsp:AntiAliasPropertyEditor active="{antialiasPanel.opened}"/>
						</txui:MultiPanel>
						<txui:MultiPanel id="containerPanel" styleName="multiPanel" label="CONTAINER" width="100%" opened="false">
							<txinsp:TextContainerPropertyEditor active="{containerPanel.opened}"/>
						</txui:MultiPanel>
						<txui:MultiPanel id="flowPanel" styleName="multiPanel" label="FLOW" width="100%" opened="false">
							<txinsp:TextFlowPropertyEditor active="{flowPanel.opened}"/>
						</txui:MultiPanel>
					</mx:VBox>
				</mx:HBox>
				
						
				<mx:ViewStack id="bottomTabs"  width="500" creationPolicy="all">
					<mx:Canvas id="empty">
						<mx:Canvas>
							
						</mx:Canvas>
					</mx:Canvas>
					<mx:Canvas id="linkBox" label="LINKS" width="100%" height="50" >
						<textEditBar:LinkBar id="linkElementProps" creationPolicy="all" includeInLayout="false"/>      
					</mx:Canvas>
					<mx:Canvas id="imageBox" label="GRAPHICS" width="100%" height="50" >
						<textEditBar:GraphicBar id="foreignElementProps" creationPolicy="all" includeInLayout="false"/>
					</mx:Canvas>
				</mx:ViewStack>
				
					
				
			</mx:Canvas>
			
		</mx:Canvas>
		
		
		
	</mx:VBox>
	
	
	
	
	
	
	
</s:Group>
