<?xml version="1.0" encoding="utf-8"?>
<std:STDModule xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" layout="absolute" width="100%" height="100%" xmlns:component="wonderland.component.*"
			   xmlns:std="wonderland.flow.module.*" creationComplete="init(event)" xmlns:view="wonderland.view.*" xmlns:view1="wonderland.flow.view.*">
	<fx:Metadata>
		[Event(name="select", type="flash.events.Event")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import wonderland.controller.ChangeProcessControllerClient;
			
			private var cnt:ChangeProcessControllerClient;
			
			[Bindable] private var changeProcessDP:Array;
			
			[Bindable] private var isLoading:Boolean = false;
			
			protected function init(event:FlexEvent):void
			{
				cnt = new ChangeProcessControllerClient(server);
				cnt.listChangeProcesses("",listProcessResult,fault);
				isLoading = true;
			}
			
			private function listProcessResult(e:ResultEvent):void{
				isLoading = false;
				changeProcessDP = JSON.decode(String(e.result));
			}
			
			private function fault(e:FaultEvent):void{
				Alert.show(e.fault.message,"Server Error");
				isLoading = false;
			}
			


			protected function selectItem(e:Event):void
			{
				
				if(processTree.selected!=null){
					processView.changeProcess = processTree.selected;	
				}
				
			}

		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<mx:HDividedBox  width="100%" height="100%">
			<view1:BunchingTree id="processTree" width="50%" height="100%" populate="{changeProcessDP}" select="selectItem(event)" 
									bunchLabelField="change_stat" defaultBunchName="Pending">
				
			</view1:BunchingTree>
			<component:ProcessView id="processView" width="100%" height="100%" server="{server}" popupParent="{this}"/>
		</mx:HDividedBox>
	</s:VGroup>
	<s:VGroup width="100%" height="100%" visible="{isLoading}" horizontalAlign="center" verticalAlign="middle">
		<view:Gear id="gear" width="200" height="200" alpha="0.4" doRunRun="{isLoading}"/>
	</s:VGroup>
	
	
	
	
</std:STDModule>